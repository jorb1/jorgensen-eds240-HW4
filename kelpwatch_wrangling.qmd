---
title: "KelpWatch data wrangling"
author: "BJ"
format: html
editor: visual
---

```{r}
#| eval: true
#| echo: false

# Load libraries
librarian::shelf(tidyverse, tidync, sf, rnaturalearth, terra, tmap, tmaptools, spData, mapdata, RColorBrewer, here, janitor)a
```


```{r}
# Read in kelp data from KelpWatch : NOTE: it is not georeferenced like a normal nc, and must be wrangled and reprojected
kelpwatch_raw <- tidync(here("data", "LandsatKelpBiomass_2024_Q4_withmetadata.nc"))

# Read in MPA boundary data
mpa_boundaries <- sf::st_read(here("data", "MPA_boundaries", "California_Marine_Protected_Areas_[ds582].shp"))
```

```{r}
# First, lets work with the kelp data
# Transform the latitude grid into a data frame
kelp_lat <- kelpwatch_raw %>%
  activate("latitude") %>%
  hyper_tibble()

# Transform the longitude grid into a data frame
kelp_lon <- kelpwatch_raw %>%
  activate("longitude") %>%
  hyper_tibble()

# Join the two geo info
kelp_latlon <- left_join(kelp_lat, kelp_lon, by = "station") %>%
  relocate(station, .before=everything()) %>% 
  # Make into sf object
  st_as_sf(coords=c("longitude", "latitude"), crs=4326, remove=FALSE) %>% 
  # Reproject to linear units (NAD UTM 10)
  st_transform(crs = 26910)
```

```{r}
# Now, lets work with the MPAs data...
mpas <- mpa_boundaries %>%
  clean_names() %>%
  select("type", "shortname", "geometry")
```

```{r}
# Transform sites to match the kelp lat/lon
mpas <- st_transform(mpas, crs = 26910)

# Buffer the sites to a little over 500m radii (in case cell spans boundary)
mpas <- st_buffer(mpas, dist = 550)

# Identify the stations that overlap with the sites
mpa_station_intersect <- st_intersects(kelp_latlon, mpas)

# Identify rows where there is at least one intersection
intersect_logical <- lengths(mpa_station_intersect) > 0

# Filter kelp_latlon for stations that intersect
mpa_station <- kelp_latlon[intersect_logical, ]
```


```{r}
# Transform the biomass grid into a data frame
kelpwatch_df <- kelpwatch_raw %>% 
  hyper_tibble(force = TRUE)

# Transform the time grid into a data frame
kelp_time <- kelpwatch_raw %>% 
  activate("year") %>% 
  hyper_tibble()

# Join the kelp data with the time grid
kelp <- left_join(kelpwatch_df, kelp_time)
```


```{r}
# Filter the kelp data for the stations that intersect and years of interest
kelp <- kelp %>% 
  filter(station %in% mpa_station$station) %>% 
  filter(year == 2024)

# Since we are interested in the max value only, can drop the zeroes 
kelp_present <- kelp %>% 
  filter(!(area == 0)) %>% 
  filter(!is.na(area)) %>% 
  dplyr::select(station, year, area)

# Calculate annual max
kelp_annual <- kelp_present %>%
  arrange(station, year) %>%
  group_by(station, year, .drop = T) %>%
  summarise_all(max, na.rm = T)
```


```{r}
# Create vector object from sites to align with the terra
mpas_vect <- vect(mpas)

# Create raster template for 30x30m grid
raster_template <- terra::rast(extent = mpas_vect,
                               crs = st_crs(kelp_latlon)$wkt,
                               resolution = 30)

# Extends by two cell size in case there are points on the edges
raster_template <- terra::extend(raster_template, 60) 

years <- unique(kelp_annual$year)
```


```{r}
for (yr in years) {
  yearly_data <- kelp_annual %>% 
    filter(year == yr) %>% 
    left_join(., kelp_latlon) %>% 
    st_as_sf()
  
  raster <- terra::rasterize(
    yearly_data,
    raster_template,
    field = "area", # The kelp canopy area value
    fun = "sum",    # Aggregates in case of overlaps
    background = NA  # Assign NA to areas without kelp
  )
  
    # Save raster to disk
  raster_path <- file.path("data", paste0("kelp_canopy_", yr, ".tif"))
  terra::writeRaster(raster, raster_path, overwrite = TRUE)
  
}
```



